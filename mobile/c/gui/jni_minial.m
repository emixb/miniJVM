/*this file generated by Nanovg_java_2_c.java ,dont modify it manual.*/
#include <stdio.h>
#include <string.h>


#define DR_FLAC_IMPLEMENTATION

#include "minial/dr_flac.h"  // Enables FLAC decoding.

#define DR_MP3_IMPLEMENTATION

#include "minial/dr_mp3.h"   // Enables MP3 decoding.

//#define MA_DEBUG_OUTPUT

//#define MA_NO_COREAUDIO

#define MINIAUDIO_IMPLEMENTATION

#include "minial/miniaudio.h"


#include "jvm.h"
#include "media.h"

//==========================================================================================
//callback
//==========================================================================================

typedef struct _S24Int{
    u8 c0;
    u8 c1;
    u8 c2;
}S24Int;

void scaleSample(void *pSamples,ma_format format, s32 channels, s32 len, float scale){
    if(len){
        switch(format){
            case ma_format_s16:{
                ma_int16* dataPtr=pSamples;
                for(s32 i=0,imax=len*channels;i<imax;i++){
                    dataPtr[i]*=scale;
                }
                break;
            }
            case ma_format_u8:{
                ma_uint8* dataPtr=pSamples;
                for(s32 i=0,imax=len*channels;i<imax;i++){
                    dataPtr[i]*=scale;
                }
                break;
            }
            case ma_format_f32:{
                f32* dataPtr=pSamples;
                for(s32 i=0,imax=len*channels;i<imax;i++){
                    dataPtr[i]*=scale;
                }
                break;
            }
            case ma_format_s24:{
                S24Int* dataPtr=pSamples;
                S24Int elem;
                for(s32 i=0,imax=len*channels;i<imax;i++){
                    elem =dataPtr[i];
                    s32 d=elem.c0|(elem.c1<<8)|(elem.c2<<16);
                    d*=scale;
                    elem.c0=d;
                    elem.c1=d>>8;
                    elem.c2=d>>16;
                    dataPtr[i]=elem;
                }
                break;
            }
            case ma_format_s32:{
                ma_int32* dataPtr=pSamples;
                for(s32 i=0,imax=len*channels;i<imax;i++){
                    dataPtr[i]*=scale;
                }
                break;
            }
        }
        
    }
}


void on_recv_frames(ma_device *pDevice, ma_uint32 frameCount, const void *pSamples) {
    if (refers._callback_minial_on_recv_frames) {
        Runtime *runtime;
        runtime = getRuntimeCurThread(refers.env);
        if (runtime) {
            //scaleSample(pSamples,pDevice->format,pDevice->channels,frameCount,1.f);
            
            JniEnv *env = refers.env;
            env->push_long(runtime->stack, (s64)(intptr_t)
            pDevice);
            env->push_int(runtime->stack, frameCount);
            env->push_long(runtime->stack, (s64)(intptr_t)
            pSamples);
            s32 ret = env->execute_method(refers._callback_minial_on_recv_frames, runtime);
            if (ret) {
                env->print_exception(runtime);
            }
            runtime = NULL;
        }
    }
}


ma_uint32 on_send_frames(ma_device *pDevice, ma_uint32 frameCount, void *pSamples) {
    if (refers._callback_minial_on_send_frames) {
        Runtime *runtime;
        runtime = getRuntimeCurThread(refers.env);
        if (runtime) {
            JniEnv *env = refers.env;
            env->push_long(runtime->stack, (s64)(intptr_t)
            pDevice);
            env->push_int(runtime->stack, frameCount);
            env->push_long(runtime->stack, (s64)(intptr_t)
            pSamples);
            s32 ret = env->execute_method(refers._callback_minial_on_send_frames, runtime);
            if (ret) {
                env->print_exception(runtime);
            }
            s32 v = env->pop_int(runtime->stack);
            //scaleSample(pSamples,pDevice->format,pDevice->channels,v,1.f);
            runtime = NULL;
            return v;
        }
    }
    return 0;
}


void on_stop(ma_device *pDevice) {
    if (refers._callback_minial_on_stop) {
        Runtime *runtime;
        runtime = getRuntimeCurThread(refers.env);
        if (runtime) {
            JniEnv *env = refers.env;
            env->push_long(runtime->stack, (s64)(intptr_t)
            pDevice);
            s32 ret = env->execute_method(refers._callback_minial_on_stop, runtime);
            if (ret) {
                env->print_exception(runtime);
            }
            runtime = NULL;
        }
    }
}
void data_callback(ma_device* pDevice, void* pOutput, const void* pInput, ma_uint32 frameCount){
    if(pInput)on_recv_frames(pDevice, frameCount, pInput);
    if(pOutput)on_send_frames(pDevice, frameCount, pOutput);
}
//==========================================================================================
//jni
//==========================================================================================

int org_mini_media_MiniAL_ma_context_init(Runtime *runtime, JClass *clazz) {
    JniEnv *env = runtime->jnienv;

    ma_context *handle_context = env->jvm_calloc(sizeof(ma_context));
    if (ma_context_init(NULL, 0, NULL, handle_context) != MA_SUCCESS) {
        env->push_long(runtime->stack, 0);
    } else {
        env->push_long(runtime->stack, (s64)(intptr_t)
        handle_context);
    }
    return 0;
}

int org_mini_media_MiniAL_ma_context_uninit(Runtime *runtime, JClass *clazz) {
    JniEnv *env = runtime->jnienv;
    s32 pos = 0;
    ma_context *
            handle_context = (__refer)(intptr_t)
    env->localvar_getLong_2slot(runtime->localvar, pos);
    pos += 2;

    if(handle_context)ma_context_uninit(handle_context);
    env->jvm_free(handle_context);
    return 0;
}



int org_mini_media_MiniAL_ma_decoder_init_file(Runtime *runtime, JClass *clazz) {
    JniEnv *env = runtime->jnienv;
    s32 pos = 0;
    Instance *path = env->localvar_getRefer(runtime->localvar, pos++);
    s32 format = env->localvar_getInt(runtime->localvar, pos++);
    s32 channels = env->localvar_getInt(runtime->localvar, pos++);
    s32 sampleRate = env->localvar_getInt(runtime->localvar, pos++);


    ma_decoder_config mdc = ma_decoder_config_init(format, channels, sampleRate);

    ma_decoder *handle_decoder = env->jvm_calloc(sizeof(ma_decoder));
    if (ma_decoder_init_file(path->arr_body, &mdc, handle_decoder) != MA_SUCCESS) {
        env->push_long(runtime->stack, 0);
    } else {
        env->push_long(runtime->stack, (s64)(intptr_t)
        handle_decoder);
    }
    return 0;
}


int org_mini_media_MiniAL_ma_decoder_init_memory(Runtime *runtime, JClass *clazz) {
    JniEnv *env = runtime->jnienv;
    s32 pos = 0;
    Instance *data = env->localvar_getRefer(runtime->localvar, pos++);
    s32 format = env->localvar_getInt(runtime->localvar, pos++);
    s32 channels = env->localvar_getInt(runtime->localvar, pos++);
    s32 sampleRate = env->localvar_getInt(runtime->localvar, pos++);


    ma_decoder_config mdc = ma_decoder_config_init(format, channels, sampleRate);

    ma_decoder *handle_decoder = env->jvm_calloc(sizeof(ma_decoder));
    if (ma_decoder_init_memory(data->arr_body, data->arr_length, &mdc, handle_decoder) != MA_SUCCESS) {
        env->push_long(runtime->stack, 0);
    } else {
        env->push_long(runtime->stack, (s64)(intptr_t)
        handle_decoder);
    }
    return 0;
}

int org_mini_media_MiniAL_ma_decoder_get_para(Runtime *runtime, JClass *clazz) {
    JniEnv *env = runtime->jnienv;
    s32 pos = 0;
    ma_decoder *handle_decoder = (__refer)(intptr_t)env->localvar_getLong_2slot(runtime->localvar, pos);
    pos += 2;
    Instance *arr = env->localvar_getRefer(runtime->localvar, pos++);
    if(handle_decoder && arr->arr_length>=3){
        env->jarray_set_field(arr, 0, handle_decoder->outputFormat);
        env->jarray_set_field(arr, 1, handle_decoder->outputChannels);
        env->jarray_set_field(arr, 2, handle_decoder->outputSampleRate);
    }
    return 0;
}

int org_mini_media_MiniAL_ma_decoder_read(Runtime *runtime, JClass *clazz) {
    JniEnv *env = runtime->jnienv;
    s32 pos = 0;
    ma_decoder *handle_decoder = (__refer)(intptr_t)
    env->localvar_getLong_2slot(runtime->localvar, pos);
    pos += 2;
    s32 frameCount = env->localvar_getInt(runtime->localvar, pos++);
    __refer
            pSamples = (__refer)(intptr_t)
    env->localvar_getLong_2slot(runtime->localvar, pos);


    if (handle_decoder) {

        s32 v = (ma_uint32) ma_decoder_read_pcm_frames(handle_decoder, pSamples, frameCount);
        env->push_int(runtime->stack, v);
    } else {
        env->push_int(runtime->stack, -1);
    }
    return 0;
}

int org_mini_media_MiniAL_ma_decoder_uninit(Runtime *runtime, JClass *clazz) {
    JniEnv *env = runtime->jnienv;
    s32 pos = 0;
    ma_decoder *
            handle_decoder = (__refer)(intptr_t)
    env->localvar_getLong_2slot(runtime->localvar, pos);
    pos += 2;

    if(handle_decoder)ma_decoder_uninit(handle_decoder);
    env->jvm_free(handle_decoder);
    return 0;
}
void setupCallback(Runtime *runtime){
    JniEnv *env = runtime->jnienv;
    c8 *name_s;
    c8 *type_s;
    c8 *clsname_s;
    if (!refers._callback_minial_on_recv_frames) {
        clsname_s = "org/mini/media/AudioDevice";
        name_s = "onReceiveFrames";
        type_s = "(JIJ)V";
        Utf8String *clsname = env->utf8_create_part_c(clsname_s, 0, strlen(clsname_s));
        Utf8String *name = env->utf8_create_part_c(name_s, 0, strlen(name_s));
        Utf8String *type = env->utf8_create_part_c(type_s, 0, strlen(type_s));
        refers._callback_minial_on_recv_frames =
        env->find_methodInfo_by_name(clsname, name, type, runtime);
        env->utf8_destory(clsname);
        env->utf8_destory(name);
        env->utf8_destory(type);
    }
    if (!refers._callback_minial_on_send_frames) {
        clsname_s = "org/mini/media/AudioDevice";
        name_s = "onSendFrames";
        type_s = "(JIJ)I";
        Utf8String *clsname = env->utf8_create_part_c(clsname_s, 0, strlen(clsname_s));
        Utf8String *name = env->utf8_create_part_c(name_s, 0, strlen(name_s));
        Utf8String *type = env->utf8_create_part_c(type_s, 0, strlen(type_s));
        refers._callback_minial_on_send_frames =
        env->find_methodInfo_by_name(clsname, name, type, runtime);
        env->utf8_destory(clsname);
        env->utf8_destory(name);
        env->utf8_destory(type);
    }
    if (!refers._callback_minial_on_stop) {
        clsname_s = "org/mini/media/AudioDevice";
        name_s = "onStop";
        type_s = "(J)V";
        Utf8String *clsname = env->utf8_create_part_c(clsname_s, 0, strlen(clsname_s));
        Utf8String *name = env->utf8_create_part_c(name_s, 0, strlen(name_s));
        Utf8String *type = env->utf8_create_part_c(type_s, 0, strlen(type_s));
        refers._callback_minial_on_stop =
        env->find_methodInfo_by_name(clsname, name, type, runtime);
        env->utf8_destory(clsname);
        env->utf8_destory(name);
        env->utf8_destory(type);
    }

}
int org_mini_media_MiniAL_ma_device_init(Runtime *runtime, JClass *clazz) {
    JniEnv *env = runtime->jnienv;
    s32 pos = 0;

    ma_context *handle_context = (__refer)(intptr_t)
    env->localvar_getLong_2slot(runtime->localvar, pos);
    pos += 2;
    s32 deviceType = env->localvar_getInt(runtime->localvar, pos++);
    __refer handle_userdata = (__refer)(intptr_t)
    env->localvar_getLong_2slot(runtime->localvar, pos);
    pos += 2;
    
    

    s32 format = env->localvar_getInt(runtime->localvar, pos++);
    s32 channels = env->localvar_getInt(runtime->localvar, pos++);
    s32 sampleRate = env->localvar_getInt(runtime->localvar, pos++);
    
    setupCallback(runtime);

    ma_device_config dev_cfg=ma_device_config_init(deviceType);
    dev_cfg.playback.format   = format;
    dev_cfg.playback.channels = channels;
    dev_cfg.capture.format   = format;
    dev_cfg.capture.channels = channels;
    dev_cfg.sampleRate        = sampleRate;
    dev_cfg.dataCallback      = data_callback;
    dev_cfg.stopCallback      = on_stop;
    dev_cfg.pUserData         = handle_userdata;

    ma_device *handle_device = env->jvm_calloc(sizeof(ma_device));
    if (ma_device_init(handle_context, &dev_cfg,handle_device) != MA_SUCCESS) {
        env->push_long(runtime->stack, 0);
    } else {
        env->push_long(runtime->stack, (s64)(intptr_t)handle_device);
    }

    return 0;
}

int org_mini_media_MiniAL_ma_device_uninit(Runtime *runtime, JClass *clazz) {
    JniEnv *env = runtime->jnienv;
    s32 pos = 0;
    __refer
            handle_device = (__refer)(intptr_t)
    env->localvar_getLong_2slot(runtime->localvar, pos);
    pos += 2;

    ma_device_uninit(handle_device);
    env->jvm_free(handle_device);
    return 0;
}

int org_mini_media_MiniAL_ma_device_start(Runtime *runtime, JClass *clazz) {
    JniEnv *env = runtime->jnienv;
    s32 pos = 0;
    __refer
            handle_device = (__refer)(intptr_t)
    env->localvar_getLong_2slot(runtime->localvar, pos);
    pos += 2;

    ma_device_start(handle_device);
    return 0;
}

int org_mini_media_MiniAL_ma_device_stop(Runtime *runtime, JClass *clazz) {
    JniEnv *env = runtime->jnienv;
    s32 pos = 0;
    __refer
            handle_device = (__refer)(intptr_t)
    env->localvar_getLong_2slot(runtime->localvar, pos);
    pos += 2;

    ma_device_stop(handle_device);
    return 0;
}

int org_mini_media_MiniAL_ma_device_is_started(Runtime *runtime, JClass *clazz) {
    JniEnv *env = runtime->jnienv;
    s32 pos = 0;
    __refer
            handle_device = (__refer)(intptr_t)
    env->localvar_getLong_2slot(runtime->localvar, pos);
    pos += 2;

    ma_bool32 r = ma_device_is_started(handle_device);
    env->push_int(runtime->stack, (s32)(intptr_t)r);
    return 0;
}

static java_native_method method_minial_table[] = {

        {"org/mini/media/MiniAL", "ma_context_init",        "()J",      org_mini_media_MiniAL_ma_context_init},
        {"org/mini/media/MiniAL", "ma_context_uninit",      "(J)V",     org_mini_media_MiniAL_ma_context_uninit},
        {"org/mini/media/MiniAL", "ma_decoder_init_file",   "([BIII)J", org_mini_media_MiniAL_ma_decoder_init_file},
        {"org/mini/media/MiniAL", "ma_decoder_init_memory", "([BIII)J", org_mini_media_MiniAL_ma_decoder_init_memory},
        {"org/mini/media/MiniAL", "ma_decoder_get_para",    "(J[I)V",    org_mini_media_MiniAL_ma_decoder_get_para},
        {"org/mini/media/MiniAL", "ma_decoder_read",        "(JIJ)I",   org_mini_media_MiniAL_ma_decoder_read},
        {"org/mini/media/MiniAL", "ma_decoder_uninit",      "(J)V",     org_mini_media_MiniAL_ma_decoder_uninit},
        {"org/mini/media/MiniAL", "ma_device_init",         "(JIJIII)J",  org_mini_media_MiniAL_ma_device_init},
        {"org/mini/media/MiniAL", "ma_device_uninit",       "(J)V",     org_mini_media_MiniAL_ma_device_uninit},
        {"org/mini/media/MiniAL", "ma_device_start",        "(J)V",     org_mini_media_MiniAL_ma_device_start},
        {"org/mini/media/MiniAL", "ma_device_stop",         "(J)V",     org_mini_media_MiniAL_ma_device_stop},
        {"org/mini/media/MiniAL", "ma_device_is_started",   "(J)I",     org_mini_media_MiniAL_ma_device_is_started},
};

s32 count_MiniALFuncTable() {
    return sizeof(method_minial_table) / sizeof(java_native_method);
}

__refer ptr_MiniALFuncTable() {
    return &method_minial_table[0];
}
